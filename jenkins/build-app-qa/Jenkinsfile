// build-app-qa
// ver 1.0.0
// date: 2023-02-19

pipeline{
    agent {
        label "ansible"
    }
    
    environment {
        HOST = ""
    }
    
    stages {

        stage('Init') {
            when {
                expression { env.ENV == 'DEV' || env.ENV == 'QA' }
            }
            steps {
                echo "Jenkins agent info:"
                withCredentials([sshUserPrivateKey(credentialsId: 'devops-id-rsa', keyFileVariable: 'keyFile', 
                    passphraseVariable: 'passphrase', usernameVariable: 'username')]) {
                    sh 'hostnamectl'
                    sh 'df -Th /'
                }
                    
                echo "--- ${JOB_NAME} ---"
                sh 'echo "JOB_START: $(date)"'
                
                echo "ENV: ${ENV}"
                echo "BUILD_NUMBER: ${env.BUILD_NUMBER}"
                script {
                    def host = ""

                    if (env.ENV == "DEV") {
                        withEnv(["HOST=${DEV_HOST}"]) {
                            host = env.HOST
                        }
                    } else if (env.ENV == "QA") {
                        withEnv(["HOST=${QA_HOST}"]) {
                            host = env.HOST
                        }
                    } else {
                        echo "Please define value for ENV variable!"
                        sh 'exit 1'
                    }
                    
                    withEnv(["HOST=${host}"]) {
                        sh '''
                            echo "DEVOPS_USER@HOST: ${DEVOPS_USER}@${HOST}"
                            
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "hostnamectl"
                            
                            echo "Pull src from dev branch..."
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}; git checkout dev; git pull"
                            
                            echo "Merge dev into qa..."
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}; git checkout qa; git merge dev"
 
                            echo "Stopping app if running..."
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}/bash; ./jenkins_stopapp_localdev.sh"
                            
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}; mvn clean"
                        '''
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    def host = ""
                    if (env.ENV == "DEV") {
                        withEnv(["HOST=${DEV_HOST}"]) {
                            host = env.HOST
                        }
                    } else if (env.ENV == "QA") {
                        withEnv(["HOST=${QA_HOST}"]) {
                            host = env.HOST
                        }
                    }
                    withEnv(["HOST=${host}"]) {
                        sh 'ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}; mvn compile"'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    def host = ""
                    if (env.ENV == "DEV") {
                        withEnv(["HOST=${DEV_HOST}"]) {
                            host = env.HOST
                        }
                    } else if (env.ENV == "QA") {
                        withEnv(["HOST=${QA_HOST}"]) {
                            host = env.HOST
                        }
                    }
                    withEnv(["HOST=${host}"]) {
                        sh 'ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}; mvn test"'
                    }
                }
            }
        }
        
        stage('Push artifacts') {
            steps {
                script {
                    def host = ""
                    def app = env.APP

                    if (env.ENV == "DEV") {
                        withEnv(["HOST=${DEV_HOST}"]) {
                            host = env.HOST
                        }
                    } else if (env.ENV == "QA") {
                        withEnv(["HOST=${QA_HOST}"]) {
                            host = env.HOST
                        }
                    }
                    withEnv(["HOST=${host}"]) {
                        sh '''
                            echo "Building package..."
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}; mvn package"
                            
                            echo "Tag package..."
                            echo "tag: ${VER_QA}.${BUILD_NUMBER}"
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}; git tag ${VER_QA}.${BUILD_NUMBER}; git push --tags"
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to QA') {
            steps {
                script {
                    def host = ""
                    def app = env.APP

                    if (env.ENV == "DEV") {
                        withEnv(["HOST=${DEV_HOST}"]) {
                            host = env.HOST
                        }
                    } else if (env.ENV == "QA") {
                        withEnv(["HOST=${QA_HOST}"]) {
                            host = env.HOST
                        }
                    }
                    withEnv(["HOST=${host}"]) {
                        sh '''
                            echo "Copy package..."
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}; pwd; cp ./target/${APP}.jar ./bin/"
                            
                            echo "Running builded app..."
                            ssh -o "${SSH_OPTIONS}" ${DEVOPS_USER}@${HOST} "cd ${PROJECT_PATH}/bash; ./jenkins_runapp_localdev.sh"
                        '''
                    }
                }
                sh 'echo "JOB_FINISH: $(date)"'
            }
        }
/*
        stage('Deploy to Terraform') {
            steps {
                script {
                    def u = env.DEVOPS_USER
                    def host_i = env.ANSIBLE_HOST
                    def host_d = env.DEV_HOST
                    def o = env.SSH_OPTIONS
                    def p_path = env.PROJECT_PATH
                    def i_path = env.DEVOPS_PROJECT_PATH
                    def app = env.APP
                    
                    sshagent (credentials: ['devops-id-rsa']) {
                        sh "ssh -o ${o} -l ${u} ${host_d} 'hostnamectl; df -Th /; uptime; \
                            last | grep '' -m3; \
                            scp -o ${o} ${p_path}/target/${app}.jar ${u}@${host_i}:${i_path}/bin/; \
                            echo \"${app}.jar copied...\"' \
                        "
                    }
                    
                    sshagent (credentials: ['devops-id-rsa']) {
                        sh "ssh -o ${o} -l ${u} ${host_i} hostnamectl; df -Th /; uptime; \
                            last | grep '' -m3 \
                        "
                    }
                }
                sh 'echo "JOB_FINISH: $(date)"'
            }
        }
*/  

     }
}