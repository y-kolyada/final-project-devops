// ansible-init-prod
// ver 1.0.0
// date: 2022-02-19

// Prerequisites:
// - new VM should be added to the DNS
// - Ansible inventory hosts file should be pulled from repository on the jenkins ansible agents

// TO DO:
// - Remove key operations into Key Deployment Center

node("ansible") {
    def u = env.DEVOPS_USER
    def h = env.ANSIBLE_HOST
    def o = env.SSH_OPTIONS
    def home = env.BASH_PATH
    def devHome = env.DEV_PATH
    def devProject = env.PROJECT_NAME
    def projectPath = env.PROJECT_PATH
    def domain = env.DOMAIN
    def agent = env.NODE_NAME
    def envName = ""
    def userName = ""

    properties([
        parameters([
            choice(name: 'ENV_NAME', choices: ['terraform', 'jenkins', 'jagent1', 'gitlab', 'gitlab1', 'dev', 'qa', 'integ', 'prod', 'dev001', 'qa001'], 
                description: 'Please select a VM to initialize the DevOps environment.'),
            string(name: 'USERNAME', description: 'Please enter a user name to register in the system.', trim: true)
        ])
    ])


    stage('Init') {
        echo "--- ${JOB_NAME} ---"
        sh 'echo "JOB_START: $(date)"'

        echo "DEVOPS_USER: ${u}"
        
        envName = params.ENV_NAME
        echo "ENV_NAME: ${ENV_NAME}"
        echo "agent: ${agent}"

        if ( params.USERNAME.toString().isEmpty() ) {
            userName = env.DEVOPS_USER
        } else {
            userName = params.USERNAME
        }
        echo "user name: ${userName}"

        echo "Agent statistics:"
        sh "hostnamectl; df -Th /; uptime; last | grep '' -m3"
        
        h = sh(
            script: "ssh -o ${o} ${u}@${agent} 'cd ~/${home}; ./get_ip.sh ${envName} ${domain}'",
            returnStdout: true
        ).trim()
        echo "TARGET HOST: ${h}"
        
        echo "Host statistics:"
        sh "ssh -o ${o} ${u}@${h} 'hostnamectl; df -Th /; uptime; \
            last | grep \"\" -m3' \
        "
    }

     stage('Add dev/qa user') {
        echo 'Add dev/qa user...'
        echo "userName: ${userName}"
        
        home = env.ANSIBLE_PATH

        // TO DO:
        // - Remove key operations into Key Deployment Center

        sh "ssh -o ${o} ${u}@${agent} 'cd ~/${home}; pwd; \
            scp -o ${o} ~/.ssh/dev_id_rsa ${u}@${envName}:~/.ssh/id_rsa; \
            scp -o ${o} ~/.ssh/dev_id_rsa.pub ${u}@${envName}:~/.ssh/id_rsa.pub; \
            [ \$? ] && echo \"keys copied...\"' \
        "
                
        if ( params.USERNAME.toString().isEmpty() ) {
            echo "user creation is skipped..."            
        } else {
            sh "ssh -o ${o} ${u}@${agent} 'cd ~/${home}; pwd; \
                ansible-playbook create_dev_user.yml -e \"host_or_group=${envName} user=${userName}\" &>/dev/null; \
                [ \$? ] && echo \"user created...\"; \
                scp -o ${o} ~/.ssh/dev_id_rsa ${userName}@${envName}:~/.ssh/id_rsa; \
                scp -o ${o} ~/.ssh/dev_id_rsa.pub ${userName}@${envName}:~/.ssh/id_rsa.pub; \
                [ \$? ] && echo \"keys copied...\"' \
            "
            echo "dev user/qa <${userName}> added..."
        }
    }

    stage('Install Java 17') {
        echo 'Install Java 17...'
        
        sh "ssh -o ${o} ${u}@${agent} 'cd ~/${home}; pwd; \
            [[ \$(java -version) ]] || ansible-playbook deploy_java17_devel.yml -e \"host_or_group=${envName}\"' \
        "
        echo 'java 17 installed...'

    }
    
    stage('Make project dir') {
        echo 'Pull Git...'
        
        sh "ssh -o ${o} ${userName}@${envName} ' \
            [ -d ~/${projectPath}/bin ] || mkdir -p ~/${projectPath}/bin; \
            [ -d ~/${projectPath}/log ] || mkdir -p ~/${projectPath}/log' \
        "
        echo "project dir <${projectPath}/bin}> created..."
        
        sh 'echo "JOB_FINISH: $(date)"'
    }    
}