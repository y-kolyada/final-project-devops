// ansible-init-agent
// ver 1.0.4
// date: 2022-02-15

// Prerequisites:
// - Vagrant checks that the VM is running
// - first time start should be done from host with Absible (e.g. VG_HOST)
// - Ansible VM shoud be created and updated, use vagrant-update-system
//
// TO DO:
// - Remove key operations into Key Deployment Center

// It is supposed that Ansible will be installed on the Jenkins agent

node("ansible") {
    def u = env.VG_USER
    def h = env.VG_HOST
    def o = env.SSH_OPTIONS
    def home = env.VG_PATH
    def envName = ""
    def agent = ""

    properties([
        parameters([
            choice(choices: ['terraform', 'jenkins', 'jagent1', 'gitlab', 'gitlab1', 'dev', 'qa', 'integ', 'prod', 'dev001'], 
            description: 'Select a VM to install Ansible and Git on the Jenkins agent.', name: 'ENV_NAME')
        ])
    ])
    
    stage('Init') {
        echo "--- ${JOB_NAME} ---"
        sh 'echo "JOB_START: $(date)"'

        echo "DEVOPS_USER: ${u}"
        echo "HOST: ${h}"
        echo "PATH: ${home}"

        // Prerequisites:
        // - first time start should be done from host with Absible (e.g. VG_HOST)
        
        sh "ssh -o ${o} ${u}@${h} 'hostnamectl; df -Th /; uptime; \
            last | grep \"\" -m3' \
        "

        envName = params.ENV_NAME        
        agent = params.ENV_NAME
        echo "Parameter: ${envName}"
        echo "agent: ${agent}"  

        sh "ssh -o ${o} ${u}@${h} 'cd ~/${home}; \
            vagrant status ${envName}'"
    }

    stage('Configure network') {
        echo 'Configure network...'
        
        u = env.DEVOPS_USER
        h = env.ANSIBLE_HOST
        home = env.ANSIBLE_PATH
        echo "DEVOPS_USER: ${u}"
        echo "HOST: ${h}"
        echo "PATH: ${home}"
        
        home = env.ANSIBLE_PATH
        echo "ANSIBLE_PATH: ${home}"

        sh "ssh -o ${o} ${u}@${h} 'cd ~/${home}; pwd; \
            ansible-playbook config_network.yml -e \"host_or_group=${envName}\"' \
        "
        echo 'network configured...'
    }

    stage('Add devops user') {
        echo 'Add devops user...'

        // TO DO:
        // - Remove key operations into Key Deployment Center

        sh "ssh -o ${o} ${u}@${h} 'cd ~/${home}; pwd; \
            ansible-playbook create_devops_user.yml -e \"host_or_group=${envName}\" &>/dev/null; \
            [ \$? ] && echo \"user created...\"; \
            scp -o ${o} ~/.ssh/devops_id_rsa devops@${agent}:.ssh/id_rsa; \
            scp -o ${o} ~/.ssh/devops_id_rsa.pub devops@${agent}:~/.ssh/id_rsa.pub; \
            [ \$? ] && echo \"keys copied...\"' \
        "
        echo 'devops user added...'
    }
    
    stage('Install Python') {
        echo 'Install Python...'

        sh "ssh -o ${o} ${u}@${h} 'cd ~/${home}; pwd; \
            ansible-playbook deploy_python.yml -e \"host_or_group=${envName}\"' \
        "
        echo 'python installed...'
    }

    stage('Install Ansible') {
        echo 'Install Ansible...'
        
        sh "ssh -o ${o} ${u}@${h} 'cd ~/${home}; pwd; \
            ansible-playbook deploy_ansible.yml -e \"host_or_group=${envName}\"' \
        "
        echo 'ansible installed...'
    }

    stage('Install Git') {
        echo 'Install Git...'
        
        sh "ssh -o ${o} ${u}@${h} 'cd ~/${home}; pwd; \
            ansible-playbook deploy_git.yml -e \"host_or_group=${envName}\"; \
            ansible-playbook config_git.yml -e \"host_or_group=${envName}\"' \
        "
        echo 'git installed...'
        
        sh 'echo "JOB_FINISH: $(date)"'
    }
}